AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation Template invokes custom resource lambda responsible for copying files from one S3 Bucket to another S3 Bucket
Parameters:
  SourceBucketName:
    Default: source-bucket-name
    Type: String
  SourceS3KeyPrefix:
    Default: code/
    Type: String
  DestinationBucket:
    Type: String
    Default: dest-bucket-name
  SourceObjects:
    Type: CommaDelimitedList
    Default: "file.txt,file2.txt,file3.txt"
Conditions:
  CreateDestBucket: !Equals [!Ref DestinationBucket, ""]
  UsingDefaultBucket: !Equals [!Ref SourceBucketName, 'source-bucket-name']
Resources:
  ArtifactsBucket:
    Condition: CreateDestBucket
    Type: "AWS::S3::Bucket"
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ConfigPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: Logging
            Effect: Allow
            Action:
              - logs:*
            Resource: arn:aws:logs:*:*:*
          - Sid: S3Get
            Effect: Allow
            Action:
            - s3:GetObject
            Resource: !Sub
              - arn:${AWS::Partition}:s3:::${S3Bucket}/${SourceS3KeyPrefix}*
              - S3Bucket: !If [UsingDefaultBucket, !Sub '${SourceBucketName}', !Ref SourceBucketName]
          - Sid: S3Put
            Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource: !Sub
            - arn:${AWS::Partition}:s3:::${DestBucket}/*
            - DestBucket: !If [CreateDestBucket, !Ref ArtifactsBucket, !Ref DestinationBucket]
  CopyObjects:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CopyObjectsLambdaFunction.Arn
      DestRegion: !Ref "AWS::Region"
      DestBucket: !If [CreateDestBucket, !Ref ArtifactsBucket, !Ref DestinationBucket]
      SourceBucket: !If [UsingDefaultBucket, !Sub '${SourceBucketName}', !Ref SourceBucketName]
      Prefix: !Ref SourceS3KeyPrefix
      Objects: !Ref SourceObjects
  CopyObjectsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt IAMRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              timer = threading.Timer(120.0, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
Outputs:
  CopyObjectsBucket:
    Description: Destination S3 Bucket with artifacts copied
    Value: !If [CreateDestBucket, !Ref ArtifactsBucket, !Ref DestinationBucket]
